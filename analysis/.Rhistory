ws
getws()
getwd()
library(rgdal)
library(raster)
r = raster("tmin01")
install.packages("rgdal")
install.packages("raster")
r = raster("tmin01")
library(rgdal)
library(raster)
r = raster("tmin01")
library(rgdal)
library(raster)
r = raster("tmin01")
w = getData('worldclim', var='tmin', res=0.5, lon=5, lat=45)
head(w)
plot(w, main='Raster with 100 cells')
plot(w)
plot(w$tmin1_16)
head(values(w$tmin1_16))
values(w$tmin1_16)
length(values(w$tmin1_16))
values = values(w$tmin1_16)
values = values[!is.na(values)]
length(values)
plot(values)
head(values)
?getData
getData("ISO3")
w2 = getData('GADM', country="DEU", level=1)
head(w2)
length(w2)
w2
w = getData('worldclim', var='tmin', res=10, lon=5, lat=45)
plot(q)
plot(w)
install.packages("TFX")
yen <- ConnectTrueFX("USD/JPY,EUR/JPY,GBP/JPY,AUD/JPY,CAD/JPY,CHF/JPY",
username="JSTrader", password="Ou812")
QueryTrueFX(yen)
library("TFX")
yen <- ConnectTrueFX("USD/JPY,EUR/JPY,GBP/JPY,AUD/JPY,CAD/JPY,CHF/JPY",
username="JSTrader", password="Ou812")
QueryTrueFX(yen)
QueryTrueFX()
ptions(digits.secs=3)
options(digits.secs=3)
ptions(digits.secs=3)
QueryTrueFX()
yen <- ConnectTrueFX("USD/JPY,EUR/JPY,GBP/JPY,AUD/JPY,CAD/JPY,CHF/JPY",
username="Zhadok", password="oliver94")
QueryTrueFX(yen)
query <- ConnectTrueFX("USD/EURO")
query <- ConnectTrueFX("USD/EURO", username="Zhadok", password="oliver94")
QueryTrueFX(query)
query <- QueryTrueFX(ConnectTrueFX("USD/EUR", username="Zhadok", password="oliver94"))
length(QueryTrueFX(ConnectTrueFX("USD/EUR", username="Zhadok", password="oliver94")))
query
test = QueryTrueFX(ConnectTrueFX("USD/EUR", username="Zhadok", password="oliver94"))
length(test)
test
test = QueryTrueFX(ConnectTrueFX("EUR/USD", username="Zhadok", password="oliver94"))
length(test)
test
test <- read.csv("C:\\Users\\Oliver\\Downloads\\EURUSD-2014\EURUSD-2014-01.csv")
test <- read.csv("C:\\Users\\Oliver\\Downloads\\EURUSD-2014\\EURUSD-2014-01.csv")
head(test)
length(test[, 1])
plot(test$X1.37622)
getCurrData <- function() {
}
test <- read.csv("C:\\Users\\Oliver\\Downloads\\EURUSD-2015\\EURUSD-2015-06.csv")
length(test[, 1])
test2 <- read.csv("C:\\Users\\Oliver\\Downloads\\EURUSD-2015\\EURUSD-2015-05.csv")
length(test2[, 1])
system.time({
plot(head(test[, 3], n=100000))
})
system.time({
plot(head(test[, 3], n=1000000))
})
library(ggplot2)
install.packages(ggplot2)
install.packages("ggplot2")
library(ggplot2)
subCurrData <- head(test, n=10000)
ggplot(subCurrData, aes(x=V2, y=V3)) + gg_line()
ggplot(subCurrData, aes(x=V2, y=V3)) + geom_line()
head(subCurrData)
test <- read.csv("C:\\Users\\Oliver\\Downloads\\EURUSD-2015\\EURUSD-2015-06.csv", header=FALSE)
subCurrData <- head(test, n=10000)
ggplot(subCurrData, aes(x=V2, y=V3)) + geom_line()
setws
set_ws
ws
gews
getws
get_ws
install.package("libredate")
install.package("lubridate")
install.package("lubridate")
install.packages("lubridate")
library(lubridate)
library(data.table)
?parse_date_time
parse_date_time("01:21:00")
temp <-
parse_date_time(temp, "H:M:S")
temp <- "01:21:00"
parse_date_time(temp, "H:M:S")
temp2 <- parse_date_time(temp, "H:M:S")
temp2
as.numeric(temp2)
temp2 <- parse_date_time(temp, "H:M:S", origin="1970-01-01")
?strptime
?hms
hms("01:21:00")
temp <- hms("01:21:00")
str(temp)
period_to_seconds(temp)
temp <- hms("01:00:00")
period_to_seconds(temp)
temp <- data.table(x=c("Ist", "Soll"), y=c("")
library(data.table)
library(ggplot2)
temp <- data.table(x=c("Ist", "Soll"), y=c(5, 350))
ggplot(temp, aes(x=x, y=y)) + geom_bar()
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity") + scale_y_log10()
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity") + scale_y_log10() + ylim(c(0, 1000))
ggplot(temp, aes(x=x, y=y))  + scale_y_log10() + ylim(c(0, 1000)) + geom_point()
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10() + ylim(c(0, 1000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(lim=c(0, 1000))
?scale_y_log10
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0, 1000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.01, 1000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.001, 1000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 1000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 100000))
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 100000))
library(scales)
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 100000), labels=comma)
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 100000), labels=comma) + xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar()  + scale_y_log10(limits=c(0.00001, 100000), labels=comma) + xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  + scale_y_log10(limits=c(0.00001, 100000), labels=comma) + xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_point()  + scale_y_log10(limits=c(0.00001, 100000), labels=comma) + xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_log10(limits=c(0.00001, 100000), labels=comma, trans = my_trans( from=-1)) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_log10(limits=c(0.00001, 100000), labels=comma, trans = my_trans( from=0)) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_continuous(limits=c(0.00001, 100000), labels=comma, trans = my_trans( from=0)) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
my_trans <- function(from=0)
{
trans <- function(x) x-from
inv <- function(x) x+from
trans_new("myscale", trans, inv,
domain = c(from, Inf))
}
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_continuous(limits=c(0.00001, 100000), labels=comma, trans = my_trans( from=0)) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_continuous(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
scale_y_log10(limits=c(0.00001, 100000), labels=comma, trans=my_trans()) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=0, y=5)) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=0, y=5), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) #+ geom_bar(stat="identity")  +
ggplot(temp, aes(x=x, y=y)) + #+ geom_bar(stat="identity")  +
geom_rect(data=data.table(x=0, y=5), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=x, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x="Ist", y=5), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=1, y=5), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll"))
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5))
ggplot(temp, aes(x=1:2, y=y)) + geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=c(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y))# + geom_bar(stat="identity")  +
ggplot(temp, aes(x=1:2, y=y)) + #geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=c(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=5)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + #geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=c(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=y)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + #geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=c(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=y)) +
scale_x_discrete(breaks=1:2) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(temp, aes(x=1:2, y=y)) + #geom_bar(stat="identity")  +
geom_rect(data=data.table(x=c(1,2), y=c(5,350)), aes(xmin=x-0.4, xmax=x+0.4, ymin=0, ymax=y)) +
scale_x_discrete(breaks=1:2, labels=c("Ist", "Soll")) +
scale_y_log10(limits=c(0.00001, 100000), labels=comma) +
xlab("Zustand") + ylab("Anzahl Ladesäulen")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot()
source("fortressRunDataLoad.R")
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
source("fortressRunDataLoad.R")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageProficiency)) + geom_point()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
groupedByRoomLevel
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
ggplot(groupedByRoomLevel[runestoneLevels==2], aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
groupedByRoomLevel[runestoneLevels==1]
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw()
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ggtitle(paste0("Observed average proficiency in ", NROW(groupedByRoomLevel[runestoneLevels==1]), " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") +
ggtitle(paste0("Observed average proficiency in ", NROW(groupedByRoomLevel[runestoneLevels==1]), " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth() +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency, size=nRuns)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
groupedByRun
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_point()
ggplot(groupedByRun, aes(x=roomLevel, y=averageProficiency)) + geom_point()
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label="test")) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label="test"), nudge_y=-0.2) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label="test"), nudge_y=-0.02) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " runs")), nudge_y=-0.02) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", "")), nudge_y=-0.02) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRun, aes(x=roomLevel, y=averageProficiency)) + geom_point()
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageProficiency)) + geom_point()
###### Error metrics ###########
groupedByRun[, ae:=abs(difficulty - proposedComputedDifficulty)]
groupedByRun[, ape:=abs((difficulty - proposedComputedDifficulty)) / difficulty]
groupedByRun
computeDifficulty1 <- function(groupedByRunRow) {
#  2 * sum(groupedByRunRow$)
}
groupedByRun[, computedDifficulty1:=apply(groupedByRun, 1, computeDifficulty1)]
########################################################################################
## Is there a multiplier for runestone level difficulty growth? (growth seems linear) ##
########################################################################################
runestoneDifficulties <- runestoneData$runestoneDifficulties
multipliers <- c()
for (roomLevel in 1:20) {
temp <- data.table(target=runestoneDifficulties[roomLevel, ], runestoneLevel=1:10)
lm1 <- lm(target ~ runestoneLevel, temp)
print(paste0("Multiplier for roomLevel=", roomLevel, ": ", lm1$coefficients[2]))
multipliers[roomLevel] <- lm1$coefficients[2]
}
multipliers
ggplot(data.table(), aes(x=1:20, y=multipliers)) + geom_point() + geom_line()
# Assumptions:
# nEnemies is function of roomLevel
# elites count as two enemies
#
#############################################
## Regression results for enemy generation ##
#############################################
# For now, base everything on difficulty
# steps: Determine number of enemies (sqrt of difficulty)
# For each enemy:
#   determine isElite
#   determine level
#   determine difficulty
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title) +
geom_point(data=dataTrain, aes(y=dataTrain$minNEnemies), color="red") + geom_point(data=dataTrain, aes(y=dataTrain$maxNEnemies), color="red")
cat(title)
# Is Elite: Lowest level seen is in roomLevel 4. Assume static factor
isEliteProbability <- dataFortresses[roomLevel>=4, (sum(isElite)/.N)]
print(paste0("Elite probability: ", isEliteProbability))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("const averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
(title <- paste0("const averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]],
" + ", modelAverageEnemyLevel$coefficients[[2]], " * runestoneLevels",
" + ", modelAverageEnemyLevel$coefficients[[3]], " * roomLevel"))
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain))+2,
aes(x=x, y=y)) + ggtitle(title)
predict(modelAverageEnemyLevel, data.table(roomLevel=1, difficulty=39, difficultyBeforePlayerMultiplier=39, runestoneLevels=1))[[1]]
predict(modelAverageEnemyLevel, data.table(roomLevel=10, difficulty=2441, difficultyBeforePlayerMultiplier=1877.692, runestoneLevels=1))[[1]]
predict(modelAverageEnemyLevel, data.table(roomLevel=20, difficulty=17000))[[1]]
# Determine difficulty. Hmm, dependent on nEnemies that were actually used (see data for roomLevel==10)
# Determine proficiency
modelAverageProficiency <- lm(averageProficiency ~ roomLevel, dataTrain)
summary(modelAverageProficiency)
(title <- paste0("const averageProficiency = ", modelAverageProficiency$coefficients[[1]],
" ", modelAverageProficiency$coefficients[[2]], " * roomLevel"))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line(data=data.table(x=dataTrain$roomLevel,
y=predict(modelAverageProficiency, dataTrain)),
aes(x=x, y=y))
##########################################################
## Regression approach 2: Difficulty "budget" per enemy ##
##########################################################
(modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel), groupedByRoomLevel))
(title <- paste0("const difficultyBudgetPerEnemyMultiplier = ", modelDifficultyBudgetMultiplier$coefficients[[1]],
" + ", modelDifficultyBudgetMultiplier$coefficients[[2]], " * Math.exp(-roomLevel);"))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20))),
aes(x=x, y=y))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.03) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
groupedByRun[roomLevel==20]
groupedByRoomLevel
str(groupedByRoomLevel)
source('C:/Users/Oliver/workspace git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
source('C:/Users/Oliver/workspace git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
str(groupedByRoomLevel)
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.03) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nude_y=-0.05) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.03) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nudge_y=-0.05) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nudge_y=-0.045) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nudge_y=-0.045) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nudge_y=-0.04) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " enemies")), nudge_y=-0.045) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " foes")), nudge_y=-0.045) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageProficiency)) + geom_point() + theme_bw() +
ylab("Average proficiency") + xlab("Room level") + ylim(c(0, 1)) + geom_smooth(method="lm") +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(nRuns, " run", ifelse(nRuns > 1, "s", ""))), nudge_y=-0.02) +
geom_text(aes(x=roomLevel, y=averageProficiency, label=paste0(sumNEnemies, " foes")), nudge_y=-0.05) +
ggtitle(paste0("Observed average proficiency in ", groupedByRoomLevel[runestoneLevels==1, sum(nRuns)], " solo runs with runestone level 1"))
