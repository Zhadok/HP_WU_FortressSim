y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
dataTrain <- groupedByRoomLevel[roomLevel>1]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMutliplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMutliplier)), dataTrain) #
dataTrain <- groupedByRoomLevel[roomLevel>1]
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMutliplier)), dataTrain) #
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
predict(modelAverageEnemyLevel, data.table(roomLevel=1, difficulty=39, runestoneLevels=1))[[1]]
predict(modelAverageEnemyLevel, data.table(roomLevel=1, difficulty=39, difficultyBeforePlayerMultiplier=39, runestoneLevels=1))[[1]]
groupedByRoomLevel[roomLevel==10]
predict(modelAverageEnemyLevel, data.table(roomLevel=10, difficulty=2441, difficultyBeforePlayerMultiplier=1877.692, runestoneLevels=1))[[1]]
dataTrain <- groupedByRoomLevel[roomLevel>2]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Is Elite: Lowest level seen is in roomLevel 4. Assume static factor
isEliteProbability <- dataFortresses[roomLevel>=4, (sum(isElite)/.N)]
print(paste0("Elite probability: ", isEliteProbability))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
dataTrain <- groupedByRoomLevel[roomLevel>4]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Is Elite: Lowest level seen is in roomLevel 4. Assume static factor
isEliteProbability <- dataFortresses[roomLevel>=4, (sum(isElite)/.N)]
print(paste0("Elite probability: ", isEliteProbability))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
dataTrain <- groupedByRoomLevel[roomLevel>1]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Is Elite: Lowest level seen is in roomLevel 4. Assume static factor
isEliteProbability <- dataFortresses[roomLevel>=4, (sum(isElite)/.N)]
print(paste0("Elite probability: ", isEliteProbability))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
predict(modelAverageEnemyLevel, data.table(roomLevel=1, difficulty=39, difficultyBeforePlayerMultiplier=39, runestoneLevels=1))[[1]]
predict(modelAverageEnemyLevel, data.table(roomLevel=10, difficulty=2441, difficultyBeforePlayerMultiplier=1877.692, runestoneLevels=1))[[1]]
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Is Elite: Lowest level seen is in roomLevel 4. Assume static factor
isEliteProbability <- dataFortresses[roomLevel>=4, (sum(isElite)/.N)]
print(paste0("Elite probability: ", isEliteProbability))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficultyBeforePlayerMultiplier)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Does number of enemies have influence on stuff
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=averageEnemyDifficulty, color=runestoneLevels)) +geom_point() +
geom_jitter(width=0.05,height=0)
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=averageEnemyLevel, color=runestoneLevels)) +geom_point() +
geom_jitter(width=0.05,height=0)
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageEnemyLevel)) + geom_point(aes(y=minAverageEnemyLevel), color="red") + geom_point(aes(y=maxAverageEnemyLevel), color="red") +
geom_point()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=difficulty/meanNEnemies)) + geom_point() + geom_point(data=data.table(x=1:20, y=difficultyBudgetsPerSingleEnemy), aes(x=x, y=y), color="red")
modelForDifficultyBudgetPerSingleEnemy <- lm(difficulty/meanNEnemies ~ I(roomLevel^2), groupedByRoomLevel)
summary(modelForDifficultyBudgetPerSingleEnemy)
difficultyBudgetsPerSingleEnemy <- predict(modelForDifficultyBudgetPerSingleEnemy, data.table(roomLevel=1:20))
ggplot(data.table(), aes(x=1:20, y=difficultyBudgetsPerSingleEnemy)) + geom_point()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=difficulty/meanNEnemies)) + geom_point() + geom_point(data=data.table(x=1:20, y=difficultyBudgetsPerSingleEnemy), aes(x=x, y=y), color="red")
dataFortresses[, enemyMultiplication:=2*enemyDifficulty*enemyLevel*(1+isElite)]
dataFortresses
dataFortresses[, enemyMultiplication:=enemyDifficulty*enemyLevel*(1+isElite)]
# How is difficulty budget divided among enemies?
ggplot(groupedByRun, aes(x=roomLevel, y=difficulty/sumProposedMultiplication)) + geom_point() + geom_line()
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA))
ggplot(groupedByRun, aes(x=as.factor(1:20), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) + scale_x_discrete()
?scale_x_discrete
ggplot(groupedByRun, aes(x=factor(roomLevel, levels=1:20, labels=1:20), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) + scale_x_discrete()
ggplot(groupedByRun, aes(x=factor(roomLevel, levels=1:20, labels=1:20), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) + scale_x_discrete()
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point()
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point()
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(roomLevel))
str(groupedByRoomLevel)
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(roomLevel))
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(roomLevel), groupedByRoomLevel)
ggplot(groupedByRoomLevel[runestoneLevels==1], aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point()
groupedByRoomLevel[roomLevel==1]
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(roomLevel), groupedByRoomLevel)
modelDifficultyBudgetMultiplier
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20)),
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20)))S,
aes(x=x, y=y))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20))),
aes(x=x, y=y))
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel), groupedByRoomLevel)
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20))),
aes(x=x, y=y))
modelDifficultyBudgetMultiplier
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel) + runestoneLevel, groupedByRoomLevel)
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel) + runestoneLevels, groupedByRoomLevel)
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20))),
aes(x=x, y=y))
modelDifficultyBudgetMultiplier
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20, runestoneLevels=1))),
aes(x=x, y=y))
modelDifficultyBudgetMultiplier
modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel), groupedByRoomLevel)
(modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel), groupedByRoomLevel))
(title <- paste0("difficultyBudgetPerEnemyMultiplier = ", modelDifficultyBudgetMultiplier$coefficients[[1]],
" + ", modelDifficultyBudgetMultiplier$coefficients[[2]], " * exp(-roomLevel)"))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * sqrt(difficulty)"))
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty)"))
cat(title)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
cat(title)
summary(modelNEnemies)
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
dataTrain
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title) +
geom_point(data=dataTrain, aes(y=dataTrain$minNEnemies), color="red")
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title) +
geom_point(data=dataTrain, aes(y=dataTrain$minNEnemies), color="red") + geom_point(data=dataTrain, aes(y=dataTrain$maxNEnemies), color="red")
(modelDifficultyBudgetMultiplier <- lm(averageDifficultyBudgetMultiplier ~ exp(-roomLevel), groupedByRoomLevel))
(title <- paste0("let difficultyBudgetPerEnemyMultiplier = ", modelDifficultyBudgetMultiplier$coefficients[[1]],
" + ", modelDifficultyBudgetMultiplier$coefficients[[2]], " * Math.exp(-roomLevel);"))
cat(title)
(title <- paste0("const difficultyBudgetPerEnemyMultiplier = ", modelDifficultyBudgetMultiplier$coefficients[[1]],
" + ", modelDifficultyBudgetMultiplier$coefficients[[2]], " * Math.exp(-roomLevel);"))
cat(title)
cat(title)
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageDifficultyBudgetMultiplier)) + geom_point() +
geom_line(data=data.table(x=1:20, y=predict(modelDifficultyBudgetMultiplier, data.table(roomLevel=1:20))),
aes(x=x, y=y))
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel), dataTrain) #
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficultyBeforePlayerMultiplier, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficultyBeforePlayerMultiplier,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
modelAverageEnemyLevel
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTraindifficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
predict(modelAverageEnemyLevel, data.table(roomLevel=1, difficulty=39, difficultyBeforePlayerMultiplier=39, runestoneLevels=1))[[1]]
modelAverageEnemyLevel
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)+2),
aes(x=x, y=y)) + ggtitle(title)
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
# Determine level
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ I(sqrt(difficulty)), dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
title <- paste0("averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]], " + ", modelAverageEnemyLevel$coefficients[[2]],  " * sqrt(difficulty)")
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain))+2,
aes(x=x, y=y)) + ggtitle(title)
modelAverageEnemyLevel
title <- paste0("const averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]],
" + ", modelAverageEnemyLevel$coefficients[[2]], " * runestoneLevels",
" + ", modelAverageEnemyLevel$coefficients[[3]], " * roomLevel")
(title <- paste0("const averageEnemyLevel = ", modelAverageEnemyLevel$coefficients[[1]],
" + ", modelAverageEnemyLevel$coefficients[[2]], " * runestoneLevels",
" + ", modelAverageEnemyLevel$coefficients[[3]], " * roomLevel"))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ difficulty + roomLevel, dataTrain) #
ggplot(dataTrain, aes(x=difficulty, y=averageEnemyLevel)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelAverageEnemyLevel, dataTrain))+2,
aes(x=x, y=y)) + ggtitle(title)
dataTrain
groupedByRoomLevel[roomLevel==1]
groupedByRun[roomLevel==1]
dataFortresses[runID==1]
dataFortresses[runID==24]
dataFortresses[runID==25]
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
ggplot(groupedByRoomLevel[roomLevel==10], aes(x=runestoneLevel, y=meanNEnemies)) + geom_point()
ggplot(groupedByRoomLevel[roomLevel==10], aes(x=runestoneLevels, y=meanNEnemies)) + geom_point()
groupedByRun[roomLevel==9]
dataFortresses[roomLevel==9]
dataFortresses[roomLevel==10, mean(enemyLevel)]
dataFortresses[roomLevel==10, mean(enemyDifficulty)]
dataFortresses[roomLevel==10, quantile(enemyDifficulty), by=runestoneLevel]
dataFortresses[roomLevel==10, quantile(enemyDifficulty), by=runestoneLevels]
dataFortresses[roomLevel==10, paste0(quantile(enemyDifficulty)), by=runestoneLevels]
dataFortresses[roomLevel==10, paste0(quantile(enemyDifficulty), collapse=","), by=runestoneLevels]
ggplot(groupedByRoomLevel[roomLevel==10], aes(x=meanNEnemies, y=averageEnemyDifficulty)
)
ggplot(groupedByRoomLevel[roomLevel==10], aes(x=meanNEnemies, y=averageEnemyDifficulty)) + geom_point()
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=averageEnemyDifficulty)) + geom_point()
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=minEnemyDifficulty)) + geom_point()
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=minEnemyDifficulty)) + geom_point()
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=maxEnemyDifficulty)) + geom_point()
ggplot(groupedByRun[roomLevel==10], aes(x=nEnemies+nElite, y=averageEnemyDifficulty)) + geom_point()
dataFortresses[roomLevel==10, .N, by=enemyDifficulty]
dataFortresses[roomLevel==10, .N, by=.(enemyDifficulty, NROW(dataFortresses[runID==runID])]
dataFortresses[roomLevel==10, .N, by=.(enemyDifficulty, NROW(dataFortresses[runID==runID]))]
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
dataFortresses[roomLevel==10, .N, by=.(enemyDifficulty, runestoneLevels)]
dataFortresses[roomLevel==10, .N, by=.(enemyDifficulty, runestoneLevels)][order(runestoneLevels,enemyDifficulty)]
# Proficiency percentage, analysis below should be per room level
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency))
# Proficiency percentage, analysis below should be per room level
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_point()
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  + geom_point(aes(y=minNEnemies), color="red") + geom_point(aes(y=maxNEnemies), color="red") +  geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies")
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title) +
geom_point(data=dataTrain, aes(y=dataTrain$minNEnemies), color="red") + geom_point(data=dataTrain, aes(y=dataTrain$maxNEnemies), color="red")
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
# Number of enemies
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(dataTrain, aes(x=difficulty, y=meanNEnemies)) + geom_point() + geom_line(data=data.table(x=dataTrain$difficulty,
y=predict(modelNEnemies, dataTrain)),
aes(x=x, y=y)) + ggtitle(title) +
geom_point(data=dataTrain, aes(y=dataTrain$minNEnemies), color="red") + geom_point(data=dataTrain, aes(y=dataTrain$maxNEnemies), color="red")
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  + geom_point(aes(y=minNEnemies), color="red") + geom_point(aes(y=maxNEnemies), color="red") +  geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  + geom_point(aes(y=minNEnemies), color="red") + geom_point(aes(y=maxNEnemies), color="red") +  geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") + geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), (x=x, y=y))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  +
geom_point(aes(y=minNEnemies), color="red") +
geom_point(aes(y=maxNEnemies), color="red") + geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") +
geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Difficulty") + ylab("Mean number of enemies")
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Difficulty") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=1:20, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Difficulty") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) +
theme_bw() + xlab("Room level") + ylab("Difficulty / sum(enemyLevel*enemyDifficulty*(1+isElite))")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot() + theme_bw() + xlab("Room level") + ylab("Average percentage the wizard was proficient against")
dirToRScript <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0(dirToRScript, "/fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
dirToRScript <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0(dirToRScript, "/fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
dirToRScript <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0(dirToRScript, "/fortressRunDataLoad.R"))
source(paste0(dirToRScript, "/fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
### Dataset size:
```{r}
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=nRuns)) + geom_bar(stat="identity") + ylab("Number of runs") + xlab("Room level") + theme_bw()
### Difficulty
When removing the player count multiplier (see [link](https://docs.google.com/spreadsheets/d/1jtBjdncxspRt51K048islZdEPTZ06yBKuZX7_MBzprI/edit#gid=0)), difficulty clearly scales quadratically with room number (for a single player):
```{r}
ggplot(groupedByRun[runestoneLevels==1], aes(x=roomLevel, y=difficultyBeforePlayerMultiplier)) + geom_point() + geom_line() +
xlab("Room level") + ylab("Difficulty before player count multiplier") + theme_bw() + ggtitle("Difficulty before player count multiplier is clearly quadratic")
dirToRScript <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0(dirToRScript, "/fortressRunDataLoad.R"))
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=nRuns)) + geom_bar(stat="identity") + ylab("Number of runs") + xlab("Room level") + theme_bw()
ggplot(groupedByRun[runestoneLevels==1], aes(x=roomLevel, y=difficultyBeforePlayerMultiplier)) + geom_point() + geom_line() +
xlab("Room level") + ylab("Difficulty before player count multiplier") + theme_bw() + ggtitle("Difficulty before player count multiplier is clearly quadratic")
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  +
geom_point(aes(y=minNEnemies), color="red") +
geom_point(aes(y=maxNEnemies), color="red") + geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") +
geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Difficulty") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) +
theme_bw() + xlab("Room level") + ylab("Difficulty / sum(enemyLevel*enemyDifficulty*(1+isElite))")
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageEnemyDifficulty)) + geom_point(aes(y=minAverageEnemyDifficulty), color="red") + geom_point(aes(y=maxAverageEnemyDifficulty), color="red") +
geom_point() + ylim(c(1,5)) + theme_bw()+ xlab("Difficulty") + ylab("Average enemy difficulty (stars)")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot() + theme_bw() + xlab("Room level") + ylab("Average percentage the wizard was proficient against")
getwd()
#dirToRScript <- dirname(rstudioapi::getSourceEditorContext()$path)
source(paste0("./fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
source(paste0("./fortressRunDataLoad.R"))
source(paste0("./fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
source(paste0("./fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=nRuns)) + geom_bar(stat="identity") + ylab("Number of runs") + xlab("Room level") + theme_bw()
ggplot(groupedByRun[runestoneLevels==1], aes(x=roomLevel, y=difficultyBeforePlayerMultiplier)) + geom_point() + geom_line() +
xlab("Room level") + ylab("Difficulty before player count multiplier") + theme_bw() + ggtitle("Difficulty before player count multiplier is clearly quadratic")
<- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  +
geom_point(aes(y=minNEnemies), color="red") +
geom_point(aes(y=maxNEnemies), color="red") + geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") +
geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Difficulty") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) +
theme_bw() + xlab("Room level") + ylab("Difficulty / sum(enemyLevel*enemyDifficulty*(1+isElite))")
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageEnemyDifficulty)) + geom_point(aes(y=minAverageEnemyDifficulty), color="red") + geom_point(aes(y=maxAverageEnemyDifficulty), color="red") +
geom_point() + ylim(c(1,5)) + theme_bw()+ xlab("Difficulty") + ylab("Average enemy difficulty (stars)")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot() + theme_bw() + xlab("Room level") + ylab("Average percentage the wizard was proficient against")
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
source('C:/Users/D059373/workspace_git/HP_WU_FortressSim/analysis/fortressRunDataLoad.R')
source(paste0("./fortressRunDataLoad.R"))
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
source(paste0("./fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=nRuns)) + geom_bar(stat="identity") + ylab("Number of runs") + xlab("Room level") + theme_bw()
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  +
geom_point(aes(y=minNEnemies), color="red") +
geom_point(aes(y=maxNEnemies), color="red") + geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") +
geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Room level") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) +
theme_bw() + xlab("Room level") + ylab("Difficulty / sum(enemyLevel*enemyDifficulty*(1+isElite))")
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageEnemyDifficulty)) + geom_point(aes(y=minAverageEnemyDifficulty), color="red") + geom_point(aes(y=maxAverageEnemyDifficulty), color="red") +
geom_point() + ylim(c(1,5)) + theme_bw()+ xlab("Difficulty") + ylab("Average enemy difficulty (stars)")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot() + theme_bw() + xlab("Room level") + ylab("Average percentage the wizard was proficient against")
source(paste0("./fortressRunDataLoad.R"))
dataTrain <- groupedByRoomLevel[roomLevel>0]
dataToPredict <- data.table(roomLevel=1:20, difficulty=playerMultiplier * getSoloDifficultyForRoomLevel(1:20), difficultyBeforePlayerMultiplier=getSoloDifficultyForRoomLevel(1:20))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=nRuns)) + geom_bar(stat="identity") + ylab("Number of runs") + xlab("Room level") + theme_bw()
ggplot(groupedByRun[runestoneLevels==1], aes(x=roomLevel, y=difficultyBeforePlayerMultiplier)) + geom_point() + geom_line() +
xlab("Room level") + ylab("Difficulty before player count multiplier") + theme_bw() + ggtitle("Difficulty before player count multiplier is clearly quadratic")
modelNEnemies <- lm(meanNEnemies ~ I(sqrt(difficulty)), dataTrain)
summary(modelNEnemies)
(title <- paste0("let nEnemies = ", modelNEnemies$coefficients[[1]], " + ", modelNEnemies$coefficients[[2]],  " * Math.sqrt(difficulty);"))
ggplot(groupedByRoomLevel, aes(x=difficulty, y=meanNEnemies))  +
geom_point(aes(y=minNEnemies), color="red") +
geom_point(aes(y=maxNEnemies), color="red") + geom_point() + theme_bw() + xlab("difficulty") + ylab("Average number of enemies") +
geom_line(data=data.table(x=dataTrain$difficulty, y=predict(modelNEnemies, dataTrain)), aes(x=x, y=y))
modelAverageEnemyLevel <- lm(averageEnemyLevel ~ runestoneLevels + roomLevel, dataTrain) #
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageEnemyLevel)) +
geom_point() + xlab("Difficulty") + ylab("Average enemy level") + theme_bw() + xlab("Room level") + ylab("Mean number of enemies") +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageEnemyLevel, dataTrain)), aes(x=x, y=y))
ggplot(groupedByRun, aes(x=as.factor(roomLevel), y=difficulty/sumProposedMultiplication)) + geom_boxplot() + ylim(c(0, NA)) +
theme_bw() + xlab("Room level") + ylab("Difficulty / sum(enemyLevel*enemyDifficulty*(1+isElite))")
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageEnemyDifficulty)) + geom_point(aes(y=minAverageEnemyDifficulty), color="red") + geom_point(aes(y=maxAverageEnemyDifficulty), color="red") +
geom_point() + ylim(c(1,5)) + theme_bw()+ xlab("Difficulty") + ylab("Average enemy difficulty (stars)")
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot() + theme_bw() + xlab("Room level") + ylab("Average percentage the wizard was proficient against")
# Proficiency percentage, analysis below should be per room level
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_point()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageProficiency)) + geom_point
ggplot(groupedByRoomLevel, aes(x=difficulty, y=averageProficiency)) + geom_point()
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line()
# Proficiency percentage, analysis below should be per room level
ggplot(groupedByRoomLevel, aes(x=as.factor(roomLevel), y=averageProficiency)) + geom_boxplot()
# Determine proficiency
modelAverageProficiency <- lm(averageProficiency ~ roomlevel, dataTrain)
# Determine proficiency
modelAverageProficiency <- lm(averageProficiency ~ roomLevel, dataTrain)
summary(modelAverageProficiency)
ggplot(groupedbyRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line(data=data.table(x=dataTrain$roomLevel,
y=predict(modelAverageProficiency, dataTrain)),
aes(x=x, y=y)) + ggtitle(title)
ggplot(groupedbyRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line(data=data.table(x=dataTrain$roomLevel,
y=predict(modelAverageProficiency, dataTrain)),
aes(x=x, y=y))
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) + geom_point() + geom_line(data=data.table(x=dataTrain$roomLevel,
y=predict(modelAverageProficiency, dataTrain)),
aes(x=x, y=y))
modelAverageProficiency <- lm(averageProficiency ~ roomLevel, dataTrain)
ggplot(groupedByRoomLevel, aes(x=roomLevel, y=averageProficiency)) +
geom_point() +
geom_line(data=data.table(x=dataTrain$roomLevel, y=predict(modelAverageProficiency, dataTrain)), aes(x=x, y=y)) +
theme_bw() + xlab("Room level") + ylab("Average proficiency")
(title <- paste0("const averageProficiency = ", modelAverageProficiency$coefficients[[1]],
" + ", modelAverageProficiency$coefficients[[2]], " * roomLevel"))
(title <- paste0("const averageProficiency = ", modelAverageProficiency$coefficients[[1]],
" ", modelAverageProficiency$coefficients[[2]], " * roomLevel"))
